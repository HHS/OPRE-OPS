"""add ProcurementShopFee model

Revision ID: 4d428009ff2a
Revises: b0b060230b81
Create Date: 2025-05-12 14:21:45.471912+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4d428009ff2a"
down_revision: Union[str, None] = "b0b060230b81"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "procurement_shop_fee_version",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column(
            "procurement_shop_id", sa.Integer(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "fee", sa.Numeric(precision=12, scale=2), autoincrement=False, nullable=True
        ),
        sa.Column("start_date", sa.Date(), autoincrement=False, nullable=True),
        sa.Column("end_date", sa.Date(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("created_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_on", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_procurement_shop_fee_version_end_transaction_id"),
        "procurement_shop_fee_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_procurement_shop_fee_version_operation_type"),
        "procurement_shop_fee_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_procurement_shop_fee_version_transaction_id"),
        "procurement_shop_fee_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "procurement_shop_fee",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("procurement_shop_id", sa.Integer(), nullable=False),
        sa.Column("fee", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("updated_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["ops_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["procurement_shop_id"],
            ["procurement_shop.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["ops_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Migrate data from procurement_shop.fee to procurement_shop_fee
    connection = op.get_bind()
    procurement_shops = connection.execute(
        sa.text("SELECT id, fee FROM procurement_shop")
    ).fetchall()

    # Insert a record in procurement_shop_fee for each procurement shop with its fee
    for shop in procurement_shops:
        shop_id, fee = shop
        if fee is not None:
            # Insert into main table and get the new ID
            # create a new transaction in the transaction table
            # and get the transaction ID
            result = connection.execute(
                sa.text(
                    "INSERT INTO transaction (issued_at) " "VALUES (NOW()) RETURNING id"
                ),
            )
            transaction_id = result.scalar()
            result = connection.execute(
                sa.text(
                    "INSERT INTO procurement_shop_fee (procurement_shop_id, fee, created_on) "
                    "VALUES (:shop_id, :fee, NOW()) RETURNING id"
                ),
                {"shop_id": shop_id, "fee": fee},
            )
            new_id = result.scalar()
            # Insert into version table with the same ID and all required columns
            connection.execute(
                sa.text(
                    "INSERT INTO procurement_shop_fee_version (id, procurement_shop_id, fee, "
                    "created_on, transaction_id, operation_type) "
                    "VALUES (:id, :shop_id, :fee, NOW(), :transaction_id, 0)"
                ),
                {
                    "id": new_id,
                    "shop_id": shop_id,
                    "fee": fee,
                    "transaction_id": transaction_id,
                },
            )

    op.drop_column("procurement_shop", "fee")
    op.drop_column("procurement_shop_version", "fee")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First add back the fee columns
    op.add_column(
        "procurement_shop_version",
        sa.Column(
            "fee", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "procurement_shop",
        sa.Column(
            "fee", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True
        ),
    )

    # Migrate data from procurement_shop_fee back to procurement_shop
    connection = op.get_bind()
    fee_data = connection.execute(
        sa.text("SELECT procurement_shop_id, fee FROM procurement_shop_fee")
    ).fetchall()

    # Update procurement_shop with fee values from procurement_shop_fee
    for shop_fee in fee_data:
        shop_id, fee = shop_fee
        if fee is not None:
            connection.execute(
                sa.text("UPDATE procurement_shop SET fee = :fee WHERE id = :shop_id"),
                {"shop_id": shop_id, "fee": fee},
            )

            # Create a new transaction for versioning
            result = connection.execute(
                sa.text(
                    "INSERT INTO transaction (issued_at) VALUES (NOW()) RETURNING id"
                )
            )
            transaction_id = result.scalar()

            # Update the version table as well
            connection.execute(
                sa.text(
                    "INSERT INTO procurement_shop_version (id, fee, transaction_id, operation_type) "
                    "SELECT id, :fee, :transaction_id, 1 FROM procurement_shop WHERE id = :shop_id"
                ),
                {"shop_id": shop_id, "fee": fee, "transaction_id": transaction_id},
            )

    # Drop the tables we created
    op.drop_table("procurement_shop_fee")
    op.drop_index(
        op.f("ix_procurement_shop_fee_version_transaction_id"),
        table_name="procurement_shop_fee_version",
    )
    op.drop_index(
        op.f("ix_procurement_shop_fee_version_operation_type"),
        table_name="procurement_shop_fee_version",
    )
    op.drop_index(
        op.f("ix_procurement_shop_fee_version_end_transaction_id"),
        table_name="procurement_shop_fee_version",
    )
    op.drop_table("procurement_shop_fee_version")
    # ### end Alembic commands ###
