"""move service_requirement_type to agreement

Revision ID: a62f33014a89
Revises: 76e2039458d9
Create Date: 2025-08-14 15:43:17.573892+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a62f33014a89"
down_revision: Union[str, None] = "76e2039458d9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "agreement",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "agreement_version",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    # First, migrate the data from aa_agreement to agreement
    op.execute(
        """
               UPDATE agreement a
               SET service_requirement_type = aa.service_requirement_type
               FROM aa_agreement aa
               WHERE a.id = aa.id
               """
    )

    # Then migrate data from aa_agreement_version to agreement_version
    op.execute(
        """
               UPDATE agreement_version av
               SET service_requirement_type = aav.service_requirement_type
               FROM aa_agreement_version aav
               WHERE av.id = aav.id
               """
    )

    # do the same for contract_agreement and contract_agreement_version
    op.execute(
        """
        UPDATE agreement a
        SET service_requirement_type = ca.service_requirement_type
        FROM contract_agreement ca
        WHERE a.id = ca.id
        """
    )

    # Then migrate data from aa_agreement_version to agreement_version
    op.execute(
        """
        UPDATE agreement_version av
        SET service_requirement_type = cav.service_requirement_type
        FROM contract_agreement_version cav
        WHERE av.id = cav.id
        """
    )

    # Now proceed with the rest of your migration
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("aa_agreement", "service_requirement_type")
    op.drop_column("aa_agreement_version", "service_requirement_type")

    op.drop_column("contract_agreement", "service_requirement_type")
    op.drop_column("contract_agreement_version", "service_requirement_type")

    # Add agreement_id as nullable first
    op.add_column(
        "services_component", sa.Column("agreement_id", sa.Integer(), nullable=True)
    )

    # Copy data before making it NOT NULL
    op.execute(
        """
        UPDATE services_component sc
        SET agreement_id = sc.contract_agreement_id
        FROM contract_agreement ca
        WHERE sc.contract_agreement_id = ca.id
        """
    )

    # Now make it NOT NULL after data is copied
    op.execute("ALTER TABLE services_component ALTER COLUMN agreement_id SET NOT NULL")

    op.drop_constraint(
        op.f("services_component_number_sub_component_optional_contract_a_key"),
        "services_component",
        type_="unique",
    )
    op.create_unique_constraint(
        None,
        "services_component",
        ["number", "sub_component", "optional", "agreement_id"],
    )
    op.drop_constraint(
        op.f("services_component_contract_agreement_id_fkey"),
        "services_component",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "services_component",
        "agreement",
        ["agreement_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # Drop old column after data migration
    op.drop_column("services_component", "contract_agreement_id")

    op.add_column(
        "services_component_version",
        sa.Column("agreement_id", sa.Integer(), autoincrement=False, nullable=True),
    )
    # copy data from contract_agreement_id to agreement_id
    op.execute(
        """
        UPDATE services_component_version scv
        SET agreement_id = scv.contract_agreement_id
        FROM contract_agreement ca
        WHERE scv.contract_agreement_id = ca.id
        """
    )

    op.drop_column("services_component_version", "contract_agreement_id")
    # ### end Alembic commands ###

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "budget_line_item",
        sa.Column("services_component_id", sa.Integer(), nullable=True),
    )
    op.create_foreign_key(
        None,
        "budget_line_item",
        "services_component",
        ["services_component_id"],
        ["id"],
    )
    op.add_column(
        "budget_line_item_version",
        sa.Column(
            "services_component_id", sa.Integer(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(
        op.f("contract_budget_line_item_services_component_id_fkey"),
        "contract_budget_line_item",
        type_="foreignkey",
    )
    # copy data from contract_budget_line_item.services_component_id to budget_line_item.services_component_id
    op.execute(
        """
        UPDATE budget_line_item bli
        SET services_component_id = cbli.services_component_id
        FROM contract_budget_line_item cbli
        WHERE bli.id = cbli.id
        """
    )

    op.execute(
        """
        UPDATE budget_line_item_version bli
        SET services_component_id = cbli.services_component_id
        FROM contract_budget_line_item_version cbli
        WHERE bli.id = cbli.id
        """
    )

    op.drop_column("contract_budget_line_item", "services_component_id")
    op.drop_column("contract_budget_line_item_version", "services_component_id")
    # ### end Alembic commands ###


def downgrade() -> None:

    op.add_column(
        "contract_budget_line_item_version",
        sa.Column(
            "services_component_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "contract_budget_line_item",
        sa.Column(
            "services_component_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.create_foreign_key(
        op.f("contract_budget_line_item_services_component_id_fkey"),
        "contract_budget_line_item",
        "services_component",
        ["services_component_id"],
        ["id"],
    )
    op.drop_column("budget_line_item_version", "services_component_id")
    op.drop_constraint(None, "budget_line_item", type_="foreignkey")
    op.drop_column("budget_line_item", "services_component_id")

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "services_component_version",
        sa.Column(
            "contract_agreement_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_column("services_component_version", "agreement_id")
    op.add_column(
        "services_component",
        sa.Column(
            "contract_agreement_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "services_component", type_="foreignkey")
    op.create_foreign_key(
        op.f("services_component_contract_agreement_id_fkey"),
        "services_component",
        "contract_agreement",
        ["contract_agreement_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "services_component", type_="unique")
    op.create_unique_constraint(
        op.f("services_component_number_sub_component_optional_contract_a_key"),
        "services_component",
        ["number", "sub_component", "optional", "contract_agreement_id"],
    )
    op.drop_column("services_component", "agreement_id")
    op.add_column(
        "contract_agreement_version",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "contract_agreement",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_column("agreement_version", "service_requirement_type")
    op.drop_column("agreement", "service_requirement_type")
    op.add_column(
        "aa_agreement_version",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "aa_agreement",
        sa.Column(
            "service_requirement_type",
            postgresql.ENUM(
                "SEVERABLE",
                "NON_SEVERABLE",
                name="servicerequirementtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
    )
    # ### end Alembic commands ###
