# ---- Dependency Installation Stage ----
FROM oven/bun@sha256:2cdd9c93006af1b433c214016d72a3c60d7aa2c75691cb44dfd5250aa379986b as deps

# hadolint ignore=DL3008
RUN apt-get update && apt-get -y install unzip --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /home/bun/app

# Copy only the package files first to leverage Docker cache
# This layer will only rebuild when package.json or bun.lockb changes
COPY package.json bun.lockb ./

# Install all dependencies (including dev dependencies needed for build)
# Use cache mount to persist Bun cache, but install to local node_modules for reliability
RUN --mount=type=cache,target=/root/.bun/install/cache \
    bun install --frozen-lockfile

# ---- Build Stage ----
FROM deps as build

# Copy configuration files that rarely change
COPY vite.config.mjs eslint.config.js jsconfig.json .babelrc bunfig.toml .babel-plugin-macrosrc ./

# Copy environment files
COPY vite-env vite-env

# Copy build-time files
COPY index.html ./

# Copy source code (this will invalidate cache when code changes, but not deps)
COPY src src
COPY public public

# Build the application
ARG MODE
ARG VITE_BACKEND_DOMAIN
COPY vite-env/env.${MODE}.local .env
RUN VITE_BACKEND_DOMAIN=${VITE_BACKEND_DOMAIN} NODE_ENV=${MODE} bun run build --mode ${MODE}

# ---- Release Stage ----
FROM alpine:3.22 as release

# hadolint ignore=DL3018
RUN apk update && apk add --no-cache nginx && rm -rf /var/cache/apk/*

COPY nginx.conf /etc/nginx/nginx.conf

WORKDIR /home/ops/app

# Copy built artifacts from the build stage
COPY --from=build /home/bun/app/build .

# Expose port
EXPOSE 3000/tcp

# Entry point to run the application.
ENTRYPOINT ["/bin/sh", "-c", "/usr/sbin/nginx -g 'daemon off;'"]
