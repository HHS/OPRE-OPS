on:
  workflow_call:

jobs:
  prepare-matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    # Define the outputs that this job will produce
    outputs:
        files: ${{ steps.set-files.outputs.FILES }}
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Set the files to run
      - id: set-files
        run: |
          FILE_LIST=$(ls frontend/cypress/e2e/*.cy.js | jq -R -s -c 'split("\n")[:-1]')
          echo "FILES=$FILE_LIST" >> $GITHUB_OUTPUT

      # Print the output 'files' for testing
      - name: Test Output
        run: |
          echo "${{ steps.set-files.outputs.FILES }}"

  e2e:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: prepare-matrix # Only run this job if the prepare-matrix job is successful

    # Define the strategy for running the e2e job
    strategy:
      fail-fast: true # Stop the job as soon as one matrix job fails
      matrix:
        file: ${{fromJson(needs.prepare-matrix.outputs.files)}}

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # Install and cache NPM dependencies
      - uses: ./.github/actions/setup-javascript

      # Stand up the system stack, to have something to poke
      - name: Launch Stack
        uses: ./.github/actions/run-full-stack
        env:
          JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
          JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}

      # Install Cypress globally
      - name: Install Cypress globally
        run: bun install -g cypress

      # Extract test filename
      - name: Get Filename
        id: get-filename
        run: |
          TEST_FILE=$(basename "${{ matrix.file }}" | sed 's/\.cy\.js//')
          echo "TEST_FILE=$TEST_FILE" >> $GITHUB_OUTPUT

      # Run the Cypress E2E Tests
      - name: E2E Test
        working-directory: frontend
        run: |
          bun run cypress install && bun run test:e2e:ci --spec $(echo "${{ matrix.file }}" | sed 's/frontend\///')

      # Upload Cypress screenshots as artifact if a test fails
      - name: Upload screenshots if failure
        if: failure() # This step will run only if the previous step fails
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          path: frontend/cypress/${{ steps.get-filename.outputs.TEST_FILE }}/screenshots # Update this path based on your project structure
          name: cypress-screenshots

      # Capture logs from all services
      - name: Capture logs
        shell: bash
        if: always()
        run: | # Capture logs from all services
          docker compose -f docker-compose.yml logs --no-color > full-stack-logs-${{ steps.get-filename.outputs.TEST_FILE }}.log

      # Upload logs as artifact
      - name: Upload logs as artifact
        if: always() # Ensure this runs, even if E2E fails
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          # Set the path to the log file
          path: full-stack-logs-${{ steps.get-filename.outputs.TEST_FILE }}
          # Optionally, set a name for the artifact
          name: full-stack-logs-${{ github.run_id }}-${{ github.sha }}-${{ steps.get-filename.outputs.TEST_FILE }}.log
