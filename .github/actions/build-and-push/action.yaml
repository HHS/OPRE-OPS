name: "build-and-push"
author: "@devops-chris"
description: "This action simplifies pushes of Docker images to ghcr.io repository"
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding

inputs:
  github_token:
    description: "Your secrets.GITHUB_TOKEN"
    required: true

  image_name:
    description: "Image name, e.g. my-user-name/my-repo (will be lowercased)"
    required: true

  dockerfile:
    description: "A path to the Dockerfile (if it's not in the repository's root directory)"
    required: false
    default: "./Dockerfile"

  context:
    description: "A path to the context in which the build will happen, see https://docs.docker.com/engine/reference/commandline/build/"
    required: false
    default: "."

  repository:
    description: "Docker repository to push an image to, defaults to ghcr.io"
    required: true
    default: "ghcr.io"

  docker_io_user:
    description: "A username to use when pushing an image to docker.io (defaults to the github.actor)"
    required: false

  docker_io_token:
    description: "Your docker.io token created via https://hub.docker.com/settings/security"
    required: false

  image_tags:
    description: "Image tags separated by comma, e.g. latest,1.0.0"
    required: false

  build_args:
    description: "Build arguments to pass to the Docker build, in the format ARG_NAME=value,ARG_NAME2=value2"
    required: false

runs:
  using: "composite"
  steps:
    - name: Log in to the Container registry
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        DOCKER_BUILDKIT: 1
        DOCKER_IO_USER: ${{ inputs.docker_io_user }}
        DOCKER_IO_TOKEN: ${{ inputs.docker_io_token }}
        IMAGE_NAME: ${{ inputs.image_name }}
        IMAGE_TAGS: ${{ inputs.image_tags }}

      run: |
        echo "Using $(docker -v)"

        echo "::group::Logging into the GitHub Container registry (ghcr.io) ..."
        echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        echo "::endgroup::"

        echo "::group::Set commit tag and image name"
        if [ "${{ github.event_name }}" = "release" ]; then
          export COMMIT_TAG=${GITHUB_REF:10}
          export COMMIT_TAG=${COMMIT_TAG//v/}
        else
          if [ -z ${IMAGE_TAGS} ]; then
            export COMMIT_TAGS=latest
          else
            export COMMIT_TAGS=${IMAGE_TAGS}
          fi
        fi

        # lowercase the image name, see https://github.com/macbre/push-to-ghcr/issues/12
        export IMAGE_NAME=$(echo ${IMAGE_NAME} | tr '[:upper:]' '[:lower:]')

        echo "Tagging with ${COMMIT_TAGS}"
        echo "::endgroup::"

        export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        export GITHUB_URL=https://github.com/${{ github.repository }}

        # Split image tags by comma and iterate over them
        IFS=',' read -ra TAGS <<< "${COMMIT_TAGS}"

        # Split build arguments by comma and prepare them for Docker build command
        IFS=',' read -ra BUILD_ARGS <<< "${{ inputs.build_args }}"
        BUILD_ARG_STRING=""
        for ARG in "${BUILD_ARGS[@]}"; do
          BUILD_ARG_STRING+="--build-arg ${ARG} "
        done

        for TAG in "${TAGS[@]}"; do
          echo "::group::Building the Docker image: ${{ inputs.repository }}/${IMAGE_NAME}:${TAG} from ${{ inputs.dockerfile }} in ${{ inputs.context}} context ..."
          set -x
          DOCKER_BUILDKIT=1 docker build \
            --file ${{ inputs.dockerfile }} \
            --cache-from ${{ inputs.repository }}/${IMAGE_NAME}:latest \
            --cache-from ${{ inputs.repository }}/${IMAGE_NAME}:deps \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg BUILD_DATE=${BUILD_DATE} \
            --build-arg GITHUB_SHA=${GITHUB_SHA} \
            ${BUILD_ARG_STRING} \
            --tag ${{ inputs.repository }}/${IMAGE_NAME}:${TAG} \
            --tag ${{ inputs.repository }}/${IMAGE_NAME}:deps \
            --tag docker.io/${IMAGE_NAME}:${TAG} \
            --label org.label-schema.build-date=${BUILD_DATE} \
            --label org.label-schema.vcs-url=${GITHUB_URL} \
            --label org.label-schema.vcs-ref=${GITHUB_SHA} \
            --label org.opencontainers.image.created=${BUILD_DATE} \
            --label org.opencontainers.image.source=${GITHUB_URL} \
            --label org.opencontainers.image.revision=${GITHUB_SHA} \
            ${{ inputs.context }}
          set +x

          echo "::endgroup::"

          echo "::group::Pushing the dependency cache layer..."
          docker push ${{ inputs.repository }}/${IMAGE_NAME}:deps && echo "Dependency cache pushed"
          echo "::endgroup::"

          echo "::group::Pushing the Docker image to ${{ inputs.repository }} with tag ${TAG}..."
          docker push ${{ inputs.repository }}/${IMAGE_NAME}:${TAG} && echo "Pushed"
          echo "::endgroup::"
        done

        if [ -z "${DOCKER_IO_TOKEN}" ]; then
          echo "::notice::NOT pushing the Docker image to docker.io ... Provide 'docker_io_token' if needed."
        else
          if [ -z ${DOCKER_IO_USER} ]; then
            export DOCKER_IO_USER="${{ github.actor }}"
          fi

          echo "::group::Pushing the Docker image to docker.io as ${DOCKER_IO_USER}..."
          echo "${DOCKER_IO_TOKEN}" | docker login docker.io -u "${DOCKER_IO_USER}" --password-stdin

          # Push each tag to docker.io
          for TAG in "${TAGS[@]}"; do
            echo "::group::Pushing the Docker image to docker.io as ${DOCKER_IO_USER} with tag ${TAG}..."
            docker push docker.io/${IMAGE_NAME}:${TAG} && echo "Pushed"
            echo "::endgroup::"
          done

          echo "::endgroup::"
        fi
